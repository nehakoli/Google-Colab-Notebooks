# -*- coding: utf-8 -*-
"""CodeBreak4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ddtd189o-V1FZmHYaj3k4QBe5EL5sMC9
"""

!pip install openpyxl

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

truck_data = pd.read_excel('../content/truck_data.xlsx')

print(truck_data.head())

truck_data.drop(columns=['Data_Ping_time', 'Current_Location', 'BookingID_Date', 'vehicleType', 'Minimum_kms_to_be_covered_in_a_day', 'Driver_Name', 'Driver_MobileNo', 'customerID', 'supplierNameCode', 'GpsProvider', 'BookingID', 'BookingID_Date', 'OriginLocation_Code', 'DestinationLocation_Code', 'trip_start_date', 'trip_end_date', 'DestinationLocation', 'ontime', 'delay', 'customerNameCode', 'supplierID', 'Material Shipped'])

truck_data1 = truck_data.drop(columns=['Data_Ping_time', 'Current_Location', 'BookingID_Date', 'vehicleType', 'Minimum_kms_to_be_covered_in_a_day', 'Driver_Name', 'Driver_MobileNo', 'customerID', 'supplierNameCode', 'GpsProvider', 'BookingID', 'BookingID_Date', 'OriginLocation_Code', 'DestinationLocation_Code', 'trip_end_date', 'DestinationLocation', 'ontime', 'delay', 'customerNameCode', 'supplierID', 'Material Shipped'])

from geopy import distance

geodistance_km = []
for row in truck_data1.itertuples(index=False):
   geodistance_km.append(distance.distance(row.Org_lat_lon, row.Des_lat_lon).km)

truck_data1['geodistaince_km']=geodistance_km

# Replace NaN row in 'TRANSPORTATION_DISTANCE_IN_KM' with geodisatnce values
truck_data1.TRANSPORTATION_DISTANCE_IN_KM.fillna(truck_data1.geodistaince_km, inplace=True)

print(truck_data1)

#11. Create the expected travel time in hours
truck_data1['expected_travelhours']=(truck_data1.Planned_ETA-truck_data1.trip_start_date).astype('timedelta64[h]')

# There are negative travel hours. I replace them with 0 hour.
truck_data1.expected_travelhours[truck_data1.expected_travelhours<0]=0
truck_data1.expected_travelhours.sort_values()

import matplotlib.pyplot as plt
ax = plt.gca()
truck_data1.plot(kind='line',x='geodistaince_km',y = 'expected_travelhours',ax=ax)

plt.show()

print(truck_data1)

truck_data1 = truck_data1[truck_data1.geodistaince_km != 0]
truck_data1.shape
# truck_data.shape

truck_data1 = truck_data1[truck_data1.TRANSPORTATION_DISTANCE_IN_KM != 0]
truck_data1.shape

truck_data1 = truck_data1[truck_data1.expected_travelhours != 0]
truck_data1.shape

# Create the actual travel time in hours
truck_data1['actual_travelhours']=((truck_data1.actual_eta-truck_data1.trip_start_date)/60).astype('timedelta64[h]')

# There are negative travel hours. I replace them with 0 hour.
truck_data1.actual_travelhours[truck_data1.actual_travelhours<0]=0
truck_data1.actual_travelhours.sort_values()

print(truck_data1)

truck_data1 = truck_data1[truck_data1.actual_travelhours != 0]
truck_data1.shape

import matplotlib.pyplot as plt
ax = plt.gca()
truck_data1.plot(kind='line',x='geodistaince_km',y = 'expected_travelhours',ax=ax)
truck_data1.plot(kind='line',x='geodistaince_km',y = 'actual_travelhours',color='red',ax=ax)

plt.show()

truck_data1['actual_temp'] = np.where((truck_data1['expected_travelhours'] != truck_data1['actual_travelhours']), truck_data1['expected_travelhours'], np.nan)

print(truck_data1)

truck_data1 = truck_data1.dropna(subset=['actual_travelhours'])

truck_data1.shape

import matplotlib.pyplot as plt
ax = plt.gca()
truck_data1.plot(kind='line',x='geodistaince_km',y = 'expected_travelhours',ax=ax)
truck_data1.plot(kind='line',x='geodistaince_km',y = 'actual_travelhours',color='red',ax=ax)

plt.show()

data_filtered = truck_data1[(truck_data1['expected_travelhours'] < 200)]
# print(truck_data1)

import matplotlib.pyplot as plt
ax = plt.gca()
data_filtered.plot(kind='line',x='geodistaince_km',y = 'expected_travelhours',ax=ax)
data_filtered.plot(kind='line',x='geodistaince_km',y = 'actual_travelhours',color='red',ax=ax)

plt.show()